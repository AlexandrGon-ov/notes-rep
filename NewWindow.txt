package ru.alex.goncharov.db;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.StackPane;
import javafx.stage.Modality;
import javafx.stage.Stage;
import org.hibernate.Session;
import ru.alex.goncharov.ui.components.UserNotes;
import java.util.ArrayList;
import java.util.Date;
import static javafx.geometry.Pos.*;



public class NewWindow implements Runnable {
    private Date noteDate = new Date();
    private TextArea textArea;
    private Button saveButton;
    private Stage newWindow;
    private TextField dateField;
    private TextField noteName;
    private static String getNoteDescription;
    private static String getNoteName;
    private static java.sql.Date dat_sql;
    private static TableView<UserNotes> table;
    private ObservableList<UserNotes> list;
    ArrayList<UserNotes> userNotesList  = new ArrayList<>();

    // Новое окно для создания заметки

    protected Stage createNewWindow() {
        //Создаем поле для текущего времени и даты
        dateField = new TextField(noteDate.toString());
        dateField.setEditable(false);
        dateField.setMaxWidth(300);

        //Создаем поле для записи заметки длиной не более 100 символов
        textArea = new TextArea();
        textArea.setPromptText("Описание заметки");
        final int MAX_CHARS = 100;
        textArea.setTextFormatter(new TextFormatter<String>(change -> change.getControlNewText().length() <= MAX_CHARS ? change : null));
        textArea.setMaxWidth(300);
        textArea.setMaxHeight(1);
        textArea.setWrapText(true);


        noteName = new TextField();
        noteName.setMaxWidth(300);
        noteName.setPromptText("Имя заметки");

        // Добавляем кнопу,  в которой создается новый поток для обработки и занесении информации,
        // введенной пользователем, в таблицу mySql
        saveButton = saveButton();


        StackPane secondRoot = new StackPane();
        secondRoot.setPadding(new Insets(5));
        StackPane.setAlignment(noteName, TOP_RIGHT);
        StackPane.setAlignment(saveButton, BOTTOM_RIGHT);
        StackPane.setAlignment(dateField, BOTTOM_LEFT);
        secondRoot.getChildren().addAll(noteName, textArea, dateField, saveButton);
        Scene secondScene = new Scene(secondRoot, 300, 100);

        newWindow = new Stage();
        newWindow.setTitle("Создать заметку");
        newWindow.setScene(secondScene);
        newWindow.initModality(Modality.WINDOW_MODAL);

        return newWindow;
    }

    //Создается кнопка "Save Button" и обрабатывается событие при нажатии
    private Button saveButton() {
        Button b = new Button("Save");
        b.setOnAction((ae) -> {
            String desc = textArea.getText();
            String nName = noteName.getText();
            Date date = dat_sql;
            UserNotes user = new UserNotes(nName, desc, date);
            userNotesList.add(user);
            list = getUserList();
            list.setAll(userNotesList);
            table.setItems(list);

            //Запускаем поток на выолнение
            new Thread(this).start();
            newWindow.close();
        });

        return b;
    }

    // Сохранение данных в таблицу
    @Override
   public void run() {

        Session session = HibernateSessionFactory.getSessionFactory().openSession();

        session.beginTransaction();

        getNoteDescription = textArea.getText();
        getNoteName = noteName.getText();
        dat_sql = new java.sql.Date(new java.util.Date().getTime());

        UserNote userNotesEntity = new UserNote();
        userNotesEntity.setDescription(getNoteDescription);
        userNotesEntity.setUsrNote(getNoteName);
        userNotesEntity.setDate(dat_sql);

        updateTable();

        session.save(userNotesEntity);
        session.getTransaction().commit();
        session.close();

    }
    protected void updateTable(){
        list = getUserList();
    }

    //Создаем табаблицу для приложения
    protected TableView<UserNotes> tableViewer() {
        table = new TableView<>();


        TableColumn<UserNotes, String> userNoteCol = new TableColumn<>("Notes");

        TableColumn<UserNotes, String> descriptionCol = new TableColumn<>("Description");

        TableColumn<UserNotes, String> noteDateCol = new TableColumn<>("Date");

        userNoteCol.setMinWidth(100);
        descriptionCol.setMinWidth(100);
        noteDateCol.setMinWidth(128);


        userNoteCol.setCellValueFactory(new PropertyValueFactory<>("noteName"));
        descriptionCol.setCellValueFactory(new PropertyValueFactory<>("description"));
        noteDateCol.setCellValueFactory(new PropertyValueFactory<>("date"));

        table.getColumns().addAll(userNoteCol, descriptionCol, noteDateCol);

        return table;
    }
    private ObservableList<UserNotes> getUserList(){


        return FXCollections.observableArrayList();
    }

}